import numpy as np

west = 0
north = 1
south = 2
east = 3


#  sample from categorical distribution.each row specifies class probabilities
def categor_sample(prob_n, np_random):
    prob_n = np.asarray(prob_n)
    csprob_n = np.cumsum(prob_n)
    return (csprob_n > np_random.rand()).argmax()


class GoldGridworldEnv():

    # limit the state in the specified shape
    def limit_coordinates(self, coord):
        coord[0] = min(coord[0], self.shape[0] - 1)
        coord[0] = max(coord[0], 0)
        coord[1] = min(coord[1], self.shape[1] - 1)
        coord[1] = max(coord[1], 0)
        return coord

    # calculate the new position after moving in the specified direction
    def calculate_transition_prob(self, current, delta):
        new_position = np.array(current) + np.array(delta)
        new_position = self.limit_coordinates(new_position).astype(int)
        new_state = np.ravel_multi_index(tuple(new_position), self.shape)
        return [(1.0, new_state, -1.0, False)]

    def __init__(self):
        self.shape = (5, 5)
        self.nS = np.prod(self.shape)
        self.nA = 4
        self.np_random = np.random
        nS = self.nS
        nA = self.nA

        # caalculate transition probabilities for each (state,action)
        P = {}
        for s in range(nS):
            position = np.unravel_index(s, self.shape)
            P[s] = {a: [] for a in range(nA)}
            P[s][north] = self.calculate_transition_prob(position, [-1, 0])
            P[s][east] = self.calculate_transition_prob(position, [0, 1])
            P[s][south] = self.calculate_transition_prob(position, [1, 0])
            P[s][west] = self.calculate_transition_prob(position, [0, -1])
        self.P = P
        # start in state (4, 0)
        isd = np.zeros(nS)
        isd[np.ravel_multi_index((4, 0), self.shape)] = 1.0
        self.isd = isd
        self.s = categor_sample(self.isd, self.np_random)
